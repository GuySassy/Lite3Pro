// Generated by gencpp from file message_transformer/ComplexCMD.msg
// DO NOT EDIT!


#ifndef MESSAGE_TRANSFORMER_MESSAGE_COMPLEXCMD_H
#define MESSAGE_TRANSFORMER_MESSAGE_COMPLEXCMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace message_transformer
{
template <class ContainerAllocator>
struct ComplexCMD_
{
  typedef ComplexCMD_<ContainerAllocator> Type;

  ComplexCMD_()
    : cmd_code(0)
    , cmd_value(0)
    , type(0)
    , data(0.0)  {
    }
  ComplexCMD_(const ContainerAllocator& _alloc)
    : cmd_code(0)
    , cmd_value(0)
    , type(0)
    , data(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _cmd_code_type;
  _cmd_code_type cmd_code;

   typedef int32_t _cmd_value_type;
  _cmd_value_type cmd_value;

   typedef int32_t _type_type;
  _type_type type;

   typedef double _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::message_transformer::ComplexCMD_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::message_transformer::ComplexCMD_<ContainerAllocator> const> ConstPtr;

}; // struct ComplexCMD_

typedef ::message_transformer::ComplexCMD_<std::allocator<void> > ComplexCMD;

typedef boost::shared_ptr< ::message_transformer::ComplexCMD > ComplexCMDPtr;
typedef boost::shared_ptr< ::message_transformer::ComplexCMD const> ComplexCMDConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::message_transformer::ComplexCMD_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::message_transformer::ComplexCMD_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::message_transformer::ComplexCMD_<ContainerAllocator1> & lhs, const ::message_transformer::ComplexCMD_<ContainerAllocator2> & rhs)
{
  return lhs.cmd_code == rhs.cmd_code &&
    lhs.cmd_value == rhs.cmd_value &&
    lhs.type == rhs.type &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::message_transformer::ComplexCMD_<ContainerAllocator1> & lhs, const ::message_transformer::ComplexCMD_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace message_transformer

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::message_transformer::ComplexCMD_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::message_transformer::ComplexCMD_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::message_transformer::ComplexCMD_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::message_transformer::ComplexCMD_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::message_transformer::ComplexCMD_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::message_transformer::ComplexCMD_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::message_transformer::ComplexCMD_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a72ae23e40d8c196548af30d3a5c3007";
  }

  static const char* value(const ::message_transformer::ComplexCMD_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa72ae23e40d8c196ULL;
  static const uint64_t static_value2 = 0x548af30d3a5c3007ULL;
};

template<class ContainerAllocator>
struct DataType< ::message_transformer::ComplexCMD_<ContainerAllocator> >
{
  static const char* value()
  {
    return "message_transformer/ComplexCMD";
  }

  static const char* value(const ::message_transformer::ComplexCMD_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::message_transformer::ComplexCMD_<ContainerAllocator> >
{
  static const char* value()
  {
    return "  int32 cmd_code\n"
"  int32 cmd_value\n"
"  int32 type\n"
"  float64 data\n"
;
  }

  static const char* value(const ::message_transformer::ComplexCMD_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::message_transformer::ComplexCMD_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd_code);
      stream.next(m.cmd_value);
      stream.next(m.type);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ComplexCMD_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::message_transformer::ComplexCMD_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::message_transformer::ComplexCMD_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "cmd_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cmd_code);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "cmd_value: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cmd_value);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "data: ";
    Printer<double>::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MESSAGE_TRANSFORMER_MESSAGE_COMPLEXCMD_H
